#lang racket

(define (withdraw amount)
  (if (> balance amount)
    (begin (set! balance (- balance amount))
           balance)
    (error "not enough money")))

(define balance 100)
(withdraw 40)

(define p (mcons 'a '(b c)))
(println p)
(define p1 p)
(define p2 (mcons 'a '(b c)))
(eq? p p1)
(equal? p p1)
(eqv? p p1)
(eq? p p2)
(equal? p p2)
(eqv? p p2)
(println p1)
(set-mcar! p 'c)
(println p)
(println p1)
(set-mcdr! p '(e g))
(println p)
(println p1)


(define (make-stack) (mcons 'stack '()))

(define (stack? s)
  (and (mpair? s) (eq? 'stack (mcar s))))

(define (insert-stack! s e)
  (if (stack? s) (set-mcdr! s (mcons e (mcdr s)))
      s))

(define (empty-stack? s)
  (and (stack? s) (null? (mcdr s))))

(define (delete-stack! s)
  (if (and (stack? s) (not (empty-stack? s)))
           (set-mcdr! s (mcdr (mcdr s)))
           s))

(define (top-stack s)
  (if (and (stack? s) (not (empty-stack? s)))
      (mcar (mcdr s))
      "emtpy stack"))

(define st (make-stack))
(println st)
(insert-stack! st 'a)
(println st)
(insert-stack! st 'b)
(println st)
(insert-stack! st 'c)
(println st)

(top-stack st)
(delete-stack! st)
(println st)
(top-stack st)
(delete-stack! st)
(println st)
(top-stack st)
(delete-stack! st)
(println st)
(top-stack st)
(delete-stack! st)
(println st)


(define (make-account balance)
  (define (withdraw amount)
    (if (>= balance amount)
        (begin (set! balance (- balance amount))
               balance)
        (error "not enough money")))
  (define (deposit amount)
    (begin (set! balance (+ balance amount))
           balance))
  (define (dispatch m)
    (cond ((eq? m 'withdraw) withdraw)
          ((eq? m 'deposit) deposit)
          (else (error "Wrong message"))))
  dispatch)

(define acc (make-account 100))
((acc 'withdraw) 60)
((acc 'deposit) 10)
(define acc2 (make-account 200))
(define acc3 acc2)
((acc2 'withdraw) 150)
((acc3 'deposit) 50)
(eq? acc2 acc3)
(equal? acc2 acc3)
(eqv? acc2 acc3)
(eq? acc acc2)
(equal? acc acc2)
(eqv? acc acc2)